num.images = 10000 # Set to 10000 to retrieve all images per file to memory
labels <- read.table("batches.meta.txt")
getwd()
setwd("/Users/eksinc/Documents/Teaching_2018_2019/FALL 2019 613/Project/cifar-10-batches-bin")
# Cycle through all 5 binary files
for (f in 1:5) {
to.read <- file(paste("data_batch_", f, ".bin", sep=""), "rb")
for(i in 1:num.images) {
l <- readBin(to.read, integer(), size=1, n=1, endian="big")
r <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
g <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
b <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
index <- num.images * (f-1) + i
images.rgb[[index]] = data.frame(r, g, b)
images.lab[[index]] = l+1
}
close(to.read)
remove(l,r,g,b,f,i,index, to.read)
}
labels <- read.table("batches.meta.txt")
images.rgb <- list()
images.lab <- list()
num.images = 10000 # Set to 10000 to retrieve all images per file to memory
# Cycle through all 5 binary files
for (f in 1:5) {
to.read <- file(paste("data_batch_", f, ".bin", sep=""), "rb")
for(i in 1:num.images) {
l <- readBin(to.read, integer(), size=1, n=1, endian="big")
r <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
g <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
b <- as.integer(readBin(to.read, raw(), size=1, n=1024, endian="big"))
index <- num.images * (f-1) + i
images.rgb[[index]] = data.frame(r, g, b)
images.lab[[index]] = l+1
}
close(to.read)
remove(l,r,g,b,f,i,index, to.read)
}
# function to run sanity check on photos & labels import
drawImage <- function(index) {
# Testing the parsing: Convert each color layer into a matrix,
# combine into an rgb object, and display as a plot
img <- images.rgb[[index]]
img.r.mat <- matrix(img$r, ncol=32, byrow = TRUE)
img.g.mat <- matrix(img$g, ncol=32, byrow = TRUE)
img.b.mat <- matrix(img$b, ncol=32, byrow = TRUE)
img.col.mat <- rgb(img.r.mat, img.g.mat, img.b.mat, maxColorValue = 255)
dim(img.col.mat) <- dim(img.r.mat)
# Plot and output label
library(grid)
grid.raster(img.col.mat, interpolate=FALSE)
# clean up
remove(img, img.r.mat, img.g.mat, img.b.mat, img.col.mat)
labels[[1]][images.lab[[index]]]
}
drawImage(sample(1:(num.images*5), size=1))
View(images.lab)
images.lab
images.lab[1]
View(images.lab)
View(images.rgb)
images.lab[[1]]
images.lab[[1:2]]
images.lab[[1,2]]
images.lab[[2]]
dims(images.lab)
size(images.lab)
dim(images.lab)
is.array(images.lab)
is.list(images.lab)
names(images.lab)
images.lab[[1]]
images.lab[[10000]]
images.lab[1:2]
images.lab[1:3072]
images.rgb[[1]]
images.rgb[[1:2]]
images.rgb[[1:2,1]]
images.rgb[[1:2]][1]
images.rgb[[1:2]][2]
View(images.rgb)
View(images.rgb)
View(images.rgb)
images.rgb[[1:3]][1:10]
images.rgb[[1:3]][1:3
]
images.rgb[[1:3]]
images.rgb[[1]]
is.data.frame(images.rgb)
images.rgb[[1,1]]
images.rgb[[1]][1]
images.rgb[[1]][1][1:10]
images.rgb[[1]][1,1:10]
images.rgb[[2]][1]
drawImage(sample(1:(num.images*5), size=1))
sample(1:(num.images*5), size=1)
drawImage(sample(1:(num.images*5), size=1))
is.data.frame(images.rgb[[1]])
